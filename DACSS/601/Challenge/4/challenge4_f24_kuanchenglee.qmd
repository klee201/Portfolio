---
title: "Challenge 4: Intro to Visulization: Univariate and Multivariate Graphs"
author: "Kuan-Cheng Lee"
description: "Resubmitted 1-2-2, 1-3-1, 1-3-2, 2-2, 2-3, 3-3, 3-4 problem solved"
date: "10/17/2024"
format:
  html:
    df-print: paged
    embed-resources: true
    self-contained-math: true
---

**Make sure you change the author's name and add the data in the above YAML
header.**

**Make sure that you are properly labeling your plots axes and legends, using
colorblind-friendly palettes, and providing alt-text for all plots. You will
lose points if you do not.**

## Setup

If you have not installed the following packages, please install them before
loading them.

```{r }
library(tidyverse)
library(readxl)
library(haven) #for loading other datafiles (SAS, STATA, SPSS, etc.)
```

## Challenge Overview

In this challenge, we will practice with the data we worked on in the previous
challenges and the data you choose to do some simple data visualizations using
the `ggplot2` package.

There will be coding components and writing components. Please read the
instructions for each part and complete your challenges.

## Datasets

-   Part 1 the ESS_Polity Data (created in Challenge 3) ⭐⭐
-   Part 2: the Australia Data (from Challenge 2) ⭐⭐
-   Part 3: see \[Part 3. Practice plotting with a dataset of your choice\].

For free data sources online, see
[Appendix: sources for data to be used in Part 3].

Find the `_data` folder, then read the datasets using the correct R command.

## Part 1. Univariate and Multivariate Graphs (4.25 pts)

We have been working with these two data sets in the previous three challenges.
Suppose we have a research project that studies European citizens' social 
behaviors and public opinions, and we are interested in how the countries
that respondents live in influence their behavior and opinion. In this challenge,
let's work with the combined dataset *ESS_Polity* and create some visualizations.

1.  **Read the combined data you created last time. (0 pts)**

```{r p1-1}
#type your code/command here.
# read data
ESS_Polity <- read_csv("ESS_Polity.csv")
```

2.  **Suppose we are interested in the central tendencies and distributions of
the following variables. At the individual level:** `age`, `male`, `edu`,
`income_10`, and `vote`. **At the country level**: `democ`.

    \(1\) Recode the `vote` column: if the value is 1, recode it as 1; if the
    value is 2, recode it as 0; if the value is 3, recode it as NA. **Make
    sure to include a sanity check for the recoded data. (0.25 pts)**

```{r p1-2-1-1}

# checking original encoding
# checking original encoding
ESS_Polity |> 
  count(vote)

```

```{r p1-2-1-2}
# recoding the vote column: 0.15 pts
ESS_Polity <- ESS_Polity |> 
  mutate(vote = case_when(
    vote == 1 ~ 1,
    vote == 2 ~ 0,
    vote == 3 ~ NA
  ))

# sanity check to make sure data is recoded correctly: 0.1 pts
ESS_Polity |> 
  count(vote)



```

```{r}
# can also do something like 
ESS_Polity |> 
  pull(vote) |> 
  unique()

```

    \(2\) For each of the five variables (`age`, `edu`, `income_10`, `vote`, and
    `democ`), please choose an appropriate type of univariate graph to plot
    the central tendencies and distribution of the variables. Explain
    why you choose this type of graph to present a particular variable (for
    example: "I use a histogram to plot `age` because it is a continuous 
    numeric variable"). **(2.5 pts)**

    **(Note: You should use at least two types of univariate graphs covered in
    the lecture.)**
    
First, I report summary statistics for the five variables to check their range, number of unique values, and data type. This step will help me determine which type of graph I should choose. This is optional, but strongly recommended when you are working on any data projects.

```{r p1-2-2-1}
# defining function
get_sum_stats <- function(x, name) {
  tibble(var = name,
         range = str_c(min(x, na.rm = TRUE),
              max(x, na.rm = TRUE),
              sep = "-"),
         mean = mean(x, na.rm = TRUE),
         sd = sd(x, na.rm = TRUE),
         na = sum(is.na(x)),
         n_unique = n_distinct(x),
         data_type = typeof(x))
}

# mapping over columns
# imap is like map but also accesses the names of the element passed to it
# (useful for when mapping over dataframe/tibble columns)
# remove the i in imap, and try to run it - you will get an error
# you could fix this by removing the var = name column in the tibble in
# get_sum_stats
ESS_Polity |> 
  select(age, edu, income_10, vote, democ) |> 
  imap(get_sum_stats) |> 
  list_rbind()

```

age: age has 88 unique values and is of type double. It is a continuous variable. We can use boxplot, violin plot, density plot, or histogram for the univariate plot.


```{r p1-2-2-2}

ggplot(ESS_Polity, aes(y = age)) +
  geom_boxplot(fill = "slateblue",
               alpha = 0.2) +
  labs(title = "Distribution of Respondents' Age",
       y = "Age") +
  theme_bw()

```

Or I can do a histogram. Note that it is important to select an appropriate bin size. In this example, a bin width between 4 and 8, or a bin number equal to 30 should show a similar distribution pattern.


```{r p1-2-2-3}

ggplot(ESS_Polity, aes(x = age)) +
  geom_histogram(binwidth = 4,
                 fill="slateblue",
                 alpha=0.2) + 
  labs(title = "Distribution of Respondents' Age", 
       x = "Age",
       y = "Count") +
  theme_bw()


```

edu: edu has 4 unique values and it is numeric (double). It is a continous or ordinal categorial variable (depends on if it is originally coded as the level of education or the years of education). We can use a histogram or bar plot.

```{r p1-2-2-4}
ggplot(ESS_Polity, aes(x = edu)) +
  geom_bar() +
  labs(title = "Distribution of Respondents' Level of Education",
       x = "Level of Education",
       y = "Count")





```

income_10: income_10 has 10 unique values and it is numeric (double). It is an ordinal categorical variable (Since there are 10 income groups, it can also be treated as a continuous variable). If we treat it as a continuous variable, we can make boxplot, violin chart, and histogram. If we treat it as a categorical variable, we can also make a bar plot.

```{r p1-2-2-5}

# Make a bar plot with NA
ggplot(ESS_Polity, aes(x=as.factor(income_10))) + 
  # as.factor force R to recognize income_10 as an ordinal variable, so
  # that the x-axis tick mark labels can automatically represent all 
  # categories.
  geom_bar(fill = "purple",
           color = "red", 
           alpha = 0.8) +
  labs(title = "Distribution of Respondents' Income Levels",
       x = "Income Levels (10 Ordinal Groups)",
       y = "Count") +
  theme_bw()



```

In this graph, we can see that a huge proportion of the income data is NAs. Although this is very important information to know, including them in the plot can affect the presentation by making the shape of the distribution not so obvious. We can remove them (but should always keep in mind that they are there!!!).

```{r p1-2-2-6}

# Make a bar plot with NA
ESS_Polity |> 
  filter(!is.na(income_10)) |> 
  ggplot(aes(x=as.factor(income_10))) + 
  geom_bar(fill = "purple",
           color = "red", 
           alpha = 0.8) +
  labs(title = "Distribution of Respondents' Income Levels",
       x = "Income Levels (10 Ordinal Groups)",
       y = "Count") +
  theme_bw()




```

vote: vote has 2 unique values and it is numeric (double). It is a binary variable (only 1 and 0). Appropriate univariate graph type: barplot.

```{r p1-2-2-7}

ggplot(ESS_Polity, aes(x = as.factor(vote))) +
  geom_bar() +
  labs(title = "Distribution of Respondents' Voter Turnout",
       x = "Turnout",
       y = "Count") +
  scale_x_discrete(labels = c("0" = "Didn't Vote", "1" = "Voted"))


```

democ: Democ has 6 unique values and it is numeric (double). It is an ordinal categorial variable (originally a quasi-numeric variable, but since there are less than 10 values, we can treat it as an ordinal categorical variable when plotting). Appropriate univariate graph type: bar plot.

```{r p1-2-2-8}
ESS_Polity |> 
  ggplot(aes(x = as.factor(democ))) +
  geom_bar(alpha = 0.8) +
  labs(title = "Distribution of Country Democracy Score by Respondent",
       x = "Democracy Score",
       y = "Count of Respondents") +
  theme_classic()

```


3.  **Suppose we want to test two hypotheses on the relationships of two pairs
of variables**. **Please use the appropriate type of graphs we learned to
visualize these two pairs of variables. Briefly describe the graph you plot,
and answer: Does the graph we create from the data support the hypothesis?**

    \(1\) Hypothesis #1: The more years of education (`edu`) a person completed, the higher income (`income_10`) they earn. **(0.75 pts)**
    edu is a variable with only four values. We can treat it as an ordinal categorical variable. Income has 10 values, and we can treat it as either a quasi-numeric or an ordinal categorical variable. In this case, we have several options: a stacked bar or a grouped bar plot.

```{r p1-3-1-1}
# stacked bar plot
ESS_Polity |> 
  ggplot(aes(x = as.factor(income_10),
             fill = as.factor(edu))) +
  geom_bar(position = "stack") +
  labs(x = "Income",
       y = "Count",
       fill = "Education",
       title = "Education Levels by Income") +
  scale_fill_viridis_d() +
  theme_bw()

```

We can clearly see that the higher income group, the greater the proportion of highest education level (4) is. This is more obvious if we do a stacked percentage bar plot.
```{r p1-3-1-2}

ESS_Polity |> 
  ggplot(aes(x = as.factor(income_10),
             fill = as.factor(edu))) +
  geom_bar(position = "fill") +
  labs(x = "Income",
       y = "Count",
       fill = "Education",
       title = "Education Levels by Income") +
  scale_fill_viridis_d()    

```

```{r p1-3-1-3}

# could remove NAs if desired:
ESS_Polity |> 
  filter(!is.na(edu),
         !is.na(income_10)) |> 
  ggplot(aes(x = as.factor(income_10),
             fill = as.factor(edu))) +
  geom_bar(position = "fill") +
  labs(x = "Income",
       y = "Proportion",
       fill = "Education",
       title = "Education Levels by Income") +
  scale_fill_viridis_d() +
  theme_bw()

```

We could also do a boxplot of income grouped by education level ( because income has 10 values, we can treat it as quasi-numeric for plotting purposes).

```{r p1-3-1-4}

ESS_Polity |>
  filter(!is.na(edu),
         !is.na(income_10)) |> 
  ggplot(aes(x = as.factor(edu), y = income_10)) +
  geom_boxplot(fill = "slateblue", alpha = 0.2) +
  labs(x = "Education", y = "Income",
       title = "Income Distribution by Levels of Education")

```

WRONG ANSWER: However, scatter plots will look very strange and it is hard to estimate the pattern of the association with less than 10 unique values.

```{r p1-3-1-Wrong Answer-1}

ESS_Polity |> 
  filter(!is.na(income_10),
         !is.na(edu)) |> 
  ggplot(aes(x = as.factor(income_10), 
             y = as.factor(edu))) +
  geom_point() +
  labs(y = "Education", x = "Income",
       title = "Respondent's Income vs Education") +
  theme_bw()

```



```{r p1-3-1-Wrong Answer-2}

# jittering may help somewhat, but still not ideal for interpretation
set.seed(601)
ESS_Polity |> 
  filter(!is.na(income_10),
         !is.na(edu)) |> 
  ggplot(aes(x = as.factor(income_10), 
             y = as.factor(edu))) +
  geom_jitter() +
  labs(y = "Education", x = "Income",
       title = "Respondent's Income vs Education") +
  theme_minimal()

```

    \(2\) Hypothesis #2: There is a gender disparity (`male`) in voting behavior(`vote`). (Either men are more likely to vote, or women are more likely to vote). **(0.75 pts)**
    
    Both male and vote are binary variables in the data. A bar plot of some kind is the best choice to help answer this question.

```{r p1-3-2-1}
#type your code/command here.

ESS_Polity |> 
  filter(!is.na(male),
         !is.na(vote)) |>  # removing NAs
  ggplot(aes(x = as.factor(male),
             fill = as.factor(vote))) +
  geom_bar(position = "fill") +
  labs(x = "Male",
       y = "Proportion",
       fill = "Voted",
       title = "Turnout by Male or Not") +
  scale_color_viridis_d() +
  theme_light()



```

The average turnouts of male voters and female voters seem very similar. Based on the available data, it seems that gender does not determine people’s decision to turnout. In fact, if you use group_by and summarise(), you will find that one is 0.767 (non-male), and another is 0.759 (male). In conclusion, the second hypothesis does not seem to find support in the data.

```{r p1-3-2-2}

ESS_Polity |> 
  group_by(male) |> 
  summarise(turnout = mean(vote, na.rm = TRUE))

```

## Part 2. Comparing between Partial and Whole, and Among Groups (2.25 pts)

In this part, we will use the clean version of the Australian public opinion poll
on Same-Sex Marriage to generate graphs and plots. **You may need to do
data transformation or mutation to facilitate graphing.**

1.  Read in data. **(0 pts)**

    ```{r p2-1}
    #type your code/command here.
    australian_data <- read_csv("australian_data.csv")
    ```

2.  Use a barplot to graph the Australian data based on their responses: yes,
no, illegible, and no response. The y-axis should be the count of responses,
and each response should be represented by one individual bar (so there should
be four bars). **(0.75 pts)**

(you can use either geom_bar() or geom_col())
    
First, we wil reshape the data.

```{r p2-2-1}
aus_long <- australian_data |> 
  pivot_longer(cols = Yes:`No Response`,
               names_to = "Response",
               values_to = "Count")
head(aus_long)

```

Now we can plot:
```{r p2-2-2}
ggplot(aus_long, 
       aes(x = Response, y = Count)) +
  geom_col() +
  labs(title = "Votes in Australia on Same-Sex Marriage") +
  theme_bw()

```
We can customize the bar plot by reordering the bars, presenting the raw numbers of each response, and editing title and labels. We can even change the y-axis tick marks from count to percentage (not required in the question).

```{r p2-2-3}
aus_long|>
  mutate(
    #we need to first force R to recognize "Response" as factor
    Response = as_factor(Response),
    #then we can use fct_relvel to specify the order of the bars
    Response = fct_relevel(Response, "Yes", "No", "Illegible")
         )|> 
  group_by(Response)|>
  summarise(Count = sum(Count))|> 
  # try without specifying group_by and ungroup, what do we get?
  ungroup()|> 
  mutate(perc = Count/sum(Count))|>
  ggplot(aes(y = perc, x = Response)) +
  geom_col() +
  labs(title = "Same-Sex Marriage in Australia Voting Results") +
  scale_y_continuous(name= "Percent of Voters", label = scales::percent) +
  geom_text(aes(label = formatC(Count,
                                format = "d",
                                big.mark = ",")),
            size = 3, vjust = -.5) +
  theme_minimal()

```


3.  Let's see if there's a relationship between Division and Response - that
is, are certain divisions more likely to respond one way compared to other 
divisions? Again, we will use barplot(s) to present the visualization. What does
your visualization tell you about the relationship between those two variables?
**(1.5 pts)**

(you can use either geom_bar() or geom_col())

```{r p2-3}

ggplot(aus_long, aes(fill = Response, x = Division, y = Count)) + 
  geom_col(position = "fill") +
  labs(title = "Vote Percentages on Same-Sex Marriage by Division", 
       x = NULL, 
       y = "Proportion") +
  # to avoid overlapping text in x-axis  
  theme(axis.text.x=element_text(angle = 70, hjust = 1))  +
  scale_fill_viridis_d()   

```

## Part 3. Practice plotting with a dataset of your choice (3.5 pts)

In this part, you will choose data of your interests for graphing and plotting.
This data can be tidy/ready-to-be-used or raw data that needs cleaning. If the
data is very large (for example, more than 20 columns), you should definitely
subset the data by selecting less than 10 variables of your interests to avoid
taking too much room in your R memory.

1.  Include a link to the data page (this page should include the introduction
or description and the link to download this dataset). **(0.5 pts)**
  **This data excel is from CDC website which is #https://data.hrsa.gov/topics/health-workforce/ahrf **

2.  Read the data you choose and briefly answer the following questions.
(Optional: you may need to subset, clean, and transform the data if necessary).
**(0.5 pt)**

    ```{r p3-2}
    #type your code/command here.
    # Reload the data, specifying that the column names are on a particular row, such as the second row
    cdc_data <- read_excel("AHRFDashboard.xlsx", sheet = "AHRF Geo Data", skip = 1)

    # Check the column names again to confirm they are correct
    colnames(cdc_data) <- c('State', 
                        'EMT and Paramedic, Male', 
                        'Population', 
                        'Rate per 100,000', 
                        'Source')
    
    dim(cdc_data)        # To get the dimension of the data
    head(cdc_data)       # Inspect the first few rows
    
    cdc_data$`EMT and Paramedic, Male` <- as.numeric(cdc_data$`EMT and Paramedic, Male`)

    
    
    ```
```{r}    

colnames(cdc_data)




```

    \(1\) What is the structure (dimension) of the data;
    There are 59 rows and 5 columns

    \(2\) What is the unit of observation?
    The unit of observation in this dataset is U.S. states and territories. Each row corresponds to data collected at the state or territory level.

    \(3\) What does each column mean in this data?
    State: The name of the U.S. state or territory. EMT and Paramedic, Male: The number of male emergency medical technicians (EMTs) and paramedics in that state or territory.Population: The total population of the state or territory.Rate per 100,000: The number of male EMTs and paramedics per 100,000 population in the state or territory. Source: The source of the data, which provides information on where the EMT and paramedic data was collected.

3.  Choose two columns/variables that you are interest in. Plot one univariate
graph for *each* of the variables. **(1 pts)**

    ```{r p3-3}
    # Univariate plot for "EMT and Paramedic, Male (State Level File)"
    # Univariate bar plot for "EMT and Paramedic, Male"
    ggplot(cdc_data, aes(x = 'State', y = 'EMT and Paramedic, Male')) +
      geom_bar(stat = "identity") +
      theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
      labs(title = "Number of Male EMTs and Paramedics by State",
          x = "State",
          y = "Number of Male EMTs and Paramedics")

    
    # Univariate plot for "Rate per 100,000"
    ggplot(cdc_data, aes(x = 'State', y = 'Rate per 100,000')) +
      geom_bar(stat = "identity") +
      theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
      labs(title = "Rate of EMTs and Paramedics per 100,000 People",
          x = "State",
          y = "Rate per 100,000 Population")


    


    ```

4.  Choose a pair of variables that may be related and make a graph (scatter
plot or barplot) using them. Based on the visual evidence, do you see any
potential association between the two variables? **(1.5 pts)**

    ```{r p3-4}
    #type your code/command here.
    # Scatter plot for EMT and Paramedic, Male vs Rate per 100,000
    ggplot(cdc_data, aes(x = `EMT and Paramedic, Male`, y = `Rate per 100,000`)) +
      geom_point() +
      geom_smooth(method = "lm", se = FALSE, color = "blue") +  # Add linear trend line
      labs(title = "Relationship between Male EMTs/Paramedics and Rate per 100,000",
          x = "Number of Male EMTs and Paramedics",
          y = "Rate per 100,000 Population")


    ```

## Appendix: sources for data to be used in Part 3

**Here are some online sources and popular Online Dataset Hub:**

1.  Many US governments (usually at the federal and state levels), bureaus,
and departments have open data archives on their websites, allowing the public
to access, download, and use them (for example the [CDC](https://www.cdc.gov/datastatistics/index.html)).
Just use Google to search for them.

2.  [**The Harvard Dataverse Repository**](https://dataverse.harvard.edu/) is
a free data repository open to all researchers from any discipline, inside and
outside the Harvard community, where you can share, archive, cite, access, and
explore research data. Each individual Dataverse collection is a customizable
collection of datasets (or a virtual repository) for organizing, managing, and showcasing datasets.

3.  [**Inter-university Consortium for Political and Social Research (ICPSR)**](https://www.icpsr.umich.edu/web/pages/ICPSR/index.html)
of the University of Michigan-Ann Arbor provides leadership and training in
data access, curation, and methods of analysis for the social science research
community.

5. [**TidyTuesday**](https://github.com/rfordatascience/tidytuesday) has many
datasets expressly for the purpose of making data visualizations.

6. [**World Health Organization**](https://www.who.int/gho/database/en/)

7. [**The National Bureau of Economic Research**](https://data.nber.org/data/)

8. [**International Monetary Fund**](https://data.imf.org/?sk=388DFA60-1D26-4ADE-B505-A05A558D9A42&sId=1479329328660)

9. [**General Social Survey**](http://gss.norc.org/)

10.  **UN: <https://data.un.org/>**

11.  [**OECD Data**](https://data.oecd.org/): economic and development data of
the most developed countries in the world.

