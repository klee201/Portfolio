---
title: "Challenge 3: Joining Relational Data, Writing Your Own Functions, and String Operations"
author: "Kuan-Cheng Lee"
date: "10/14/2024"
format: 
  html: 
    embed-resources: true
    self-contained-math: true
---

**Make sure you change the author's name and the date.**

## Setup

If you have not installed the following packages, please install them before 
loading them.

```{r packages}
library(tidyverse)
library(readxl)
library(haven) #for loading other datafiles (SAS, STATA, SPSS, etc.)
```

## Challenge Overview

In this challenge, we will practice `join()` with relational data and using string
functions to process, extract information, and mutate and clean data. We will 
also practice writing our own functions.

There will be coding components and writing components. Please read the 
instructions for each part and complete the assignment.

## Datasets

You will use three different datasets in this challenge. 

-   Part 1 and 2: ESS_5.dta and p5v2018.sav (used in Challenge 1) ⭐⭐
-   Part 3: babynames.csv (used in Challenge 1) ⭐

## Part 1. Joining Individual-level and Country-Level Data

We have been working with ESS and Polity datasets in the previous two challenges,
so you should be familiar with them. 

Suppose we have a research project that studies European citizens' social behaviors
and public opinions, and we are interested in **how the countries that 
respondents live in influence their behavior and opinion**. In this case, we 
will need to combine the two datasets.

1.  **Read in the two raw datasets.**

    **For ESS_5: (1) keep only the following columns:** `idno`, `essround`, 
    `male`, `age`, `edu`, `eth_major`, `income_10`, `cntry`, `vote`. 
    **(2)** recode `essround` to 2010, and rename it `year`.

    **For Polity V, keep the first 10 columns.**

```{r p1-1-1}
#Type your code here
# read in ESS_5 
ESS_5 <- read_dta("ESS_5.dta") |> 
  select(idno, essround, male, age, edu, eth_major, income_10, cntry, vote) |>
  mutate(essround = 2010) |> 
  rename(year = essround)
head(ESS_5)
```

```{r p1-1-2}
# read in Polity V
p5v2018 <- read_sav("p5v2018.sav") |> 
  select(1:10)

```

2.  **Answer the following questions:**

    \(1\) In this project, what is our unit of analysis? Which is the primary data, and which is the foreign data?
    **The unit of analysis is each individual respondent in a given country. The primary data is ESS_5, and the foreign data is Polity V.**


    \(2\) What is(are) the key(s) for the two datasets?
    **The keys for ESS_5 are idno (ID # of respondent) and country (cntry), and the key for Polity V is cyear (country-year).**
    

3.  **Suppose we have a theory that a country's level of democracy (`democ` in 
Polity V) affects an individual's electoral participation (`vote` in ESS 5). We
must first conduct some necessary data transformation before merging the two data.**

    \(1\) Countries in ESS_5 are coded with their 2-digit codes (ISO-3166-1) in
    the `cntry` column. It is difficult to identify from these two-letter 
    abbreviations. Let's first transform the `cntry` column by changing it from
    the abbreviations to the full country names and renaming the column as *country.*

    Please refer to [this website](https://datahub.io/core/country-list) for the
    list of countries with their 2-letter abbreviations. Read the 
    [country list (csv) file](https://datahub.io/core/country-list/r/data.csv),
    into RStudio, and merge it with the ESS_5 data. By doing so, you add a new
    `country` column to the existing ESS_5 data.

```{r p1-3a-1}
country_code <- read_csv("https://datahub.io/core/country-list/r/data.csv")

head(country_code)


```


```{r p1-3a}
# code column corresponds to cntry in ESS_5
ESS_5 <- ESS_5 |> 
  left_join(country_code,  by = c("cntry" = "Code")) |> 
  rename(country = Name)
```

    \(2\) What column(s) will we use as a matching key(s) for combining the updated ESS_5 dataset and Polity V dataset? Note: you can use multiple matching strategies, but I suggest you create a common matching key for both data if there are none.
**The first strategy is to filter the Polity V data by year == 2010 (since ESS_5 only surveys people in a particular year). By doing so, we will use column country in ESS_5 and country in Polity V for the matching key. The second strategy is to use both year and country in ESS_5 and year and country in Polity V as the matching key.**

    \(3\) Join the two data (updated ESS_5 and Polity V). Please print the first
    few entries as a sanity check. Name the joined data as `ESS_Polity`

```{r p1-3b}
# Check the structure and dimensions of the joined data
# option 1
ESS_Polity1 <- ESS_5 |> 
  left_join(filter(p5v2018, year == 2010),
            by = "country")
head(ESS_Polity1)

# option 2
ESS_Polity <- ESS_5 |> 
  left_join(p5v2018, 
            by = c("year", "country"))
head(ESS_Polity)


```

    \(4\) Save the joined data `ESS_Polity` to your local directory using the
    following code. We will be using this joined data to explore visualization
    in future challenges. (This is for future usage. You do **not** need to 
    submit the saved joined data.)

    ```{r save-ess_polity}
    write_csv(ESS_Polity, "ESS_Polity.csv")
    ```

4.  **Describe the data structure of the newly joined data *ESS_Polity*. What are
its dimensions (# of rows and \# of columns)? What is its unit of observation?
Compared to the original ESS_5 data, does the above data combination change the
dimension and unit of observation?**

    ```{r p1-4}
    #Type your code here
    # Describe the structure of the joined data
    
    dim(ESS_Polity)  # Returns the dimensions

    ```

## Part 2. Writing Your Own Functions

Please use the joined data ***ESS_Polity*** in Part 1 and write **ONE** function
to complete all the following tasks:

\(1\) Calculate the range, average, standard deviation, number of NAs, and the 
number of unique values of any given numeric-type (double or integer) columns.

```{r p2-1}
# if passing a vector
sum_stat <- function(x) {
  tibble(
    range = str_c(min(x, na.rm = TRUE),
                  max(x, na.rm = TRUE),
                  sep = "-"),
    mean = mean(x, na.rm = TRUE),
    sd = sd(x, na.rm = TRUE),
    na = sum(is.na(x)),
    n_unique = (length(unique(x)))
  )
}

# a tidyverse version (I do not expect students to code this, only provided for
# for reference)
# {{ }} are necessary because of non-standard evaluation in tidyverse
sum_stat_tidy <- function(data, x){
  data |> 
    summarise(
      range = str_c(min({{ x }}, na.rm = TRUE),
                  max({{ x }}, na.rm = TRUE),
                  sep = "-"),
      mean = mean({{ x }}, na.rm = TRUE),
      sd = sd({{ x }}, na.rm = TRUE),
      na = sum(is.na({{ x }})),
      n_unique = n_distinct({{ x }})
    )
}


```


\(2\) Test your function with any four columns of your choice.

```{r p2-2}
# vector version
sum_stat(ESS_Polity$age)

# can also use piping
ESS_Polity |> 
  pull(edu) |> 
  sum_stat()

# tidyverse version
ESS_Polity |> 
  sum_stat_tidy(male)

ESS_Polity |> 
  sum_stat_tidy(income_10)


```

## Part 3. Practicing Stringr Package with Babynames

1.  **Import the babynames data:**

```{r p3-1}
#Type your code here
# Load your data (assuming it's in a CSV file called 'babynames.csv')
# Assuming babynames data is already loaded
babynames <- read.csv("babynames.csv")


# finding longest length
babynames |>
  count(length = str_length(Name)) |> 
  arrange(desc(length)) |> 
  head()
# finding names with 15 characters
babynames |> 
  filter(str_length(Name) == 15) |> 
  count(Name, sort = TRUE)

# could combine both steps (if you don't care how many characters long a 
# name is)
babynames |> 
  filter(str_length(Name) == max(str_length(Name))) |> 
  count(Name, sort = TRUE)





```

2.  **Use different string functions from the stringr package to answer the 
following questions:**

    \(1\) Find and list the longest names using 
    [`count()`](https://dplyr.tidyverse.org/reference/count.html) and a string function.

    \(2\) Use a string function to detect if the following names are present in the data:

    "Ronaldo", "Messi", "Wayne", "Clark", "Rick", and "Morty".
```{r p3-2}

# to count how many times each variable occurs
babynames |> 
  summarise(
    ronaldo = sum(str_detect(Name, "Ronaldo")),
    messi = sum(str_detect(Name, "Messi")),
    wayne = sum(str_detect(Name, "Wayne")),
    clark = sum(str_detect(Name, "Clark")),
    rick = sum(str_detect(Name, "Rick")),
    morty = sum(str_detect(Name, "Morty"))
  )


# to just detect
babynames |> 
  summarise(
    ronaldo = any(str_detect(Name, "Ronaldo")),
    messi = any(str_detect(Name, "Messi")),
    wayne = any(str_detect(Name, "Wayne")),
    clark = any(str_detect(Name, "Clark")),
    rick = any(str_detect(Name, "Rick")),
    morty = any(str_detect(Name, "Morty"))
  )    


#Use the Anchoring (a way of regular expression), "^name$", to specify the
# name that you search for. By using Anchoring ("^"and"$"), you can search
# the exact name by specifying the beginning and the ending letters.
babynames |> 
  summarise(
    ronaldo = any(str_detect(Name, "^Ronaldo$")),
    messi = any(str_detect(Name, "^Messi$")),
    wayne = any(str_detect(Name, "^Wayne$")),
    clark = any(str_detect(Name, "^Clark$")),
    rick = any(str_detect(Name, "^Rick$")),
    morty = any(str_detect(Name, "^Morty$"))
  )   


# in this case, results are the same because of how names are stored

# could also use a mapping function
specific_names <- c("Ronaldo", "Messi", "Wayne",
                    "Clark", "Rick", "Morty")
names(specific_names) <- specific_names

map_lgl(specific_names, ~ any(str_detect(babynames$Name, .x)))




```

    \(3\) Create a column `last_name` with just one value `"LastName"`. Next,
    create another column `full_name`, by combing the strings of columns
    `name` and `last_name`, separated by a period. For example, a value in this
    new column should be something like like `"Jacky.LastName"`.
    
```{r p3-3}
babynames <- babynames|>
  mutate(LastName = "LastName",
         FullName = str_c(Name, LastName, sep = "."))

head(babynames)


```

    \(4\) Find all `"Elizabeth"`'s in the data and replace `"Elizabeth"` with 
    `"Liz"`.

```{r p3-4}
# option 1: str_replace_all()
babynames_liz1 <- babynames |>
  mutate(Name = str_replace_all(Name, "Elizabeth", "Liz"),
         FullName = str_replace_all(FullName, "Elizabeth", "Liz"))

head(babynames_liz1)



# option 2: case_when
babynames_liz2 <- babynames |>
  mutate(
    Name = case_when(
      Name == "Elizabeth" ~ "Liz", # we are using == for an exact match here 
                                 # so the end result may be slightly different
                                 # when we use replace_all()
      .default = Name),
    FullName = case_when(
      FullName == "Elizabeth.LastName" ~ "Liz.LastName",
      .default = FullName
    )
    )

head(babynames_liz2)


```
